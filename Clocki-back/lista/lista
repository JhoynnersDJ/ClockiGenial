const express = require('express');
const { collection, query, getDocs, where, orderBy, limit, doc, getDoc} = require('firebase/firestore');
const { db } = require('../database/firebase');
const { obtenerPrecioBCV } = require('../bcv');

const router = express.Router();



// Ruta para obtener todos los registros de tiempo de una actividad
router.get('/lista-tiempo/:id_actividad', async (req, res) => {
  try {
    const { id_actividad } = req.params;
    console.log('Valor de id_actividad:', id_actividad);

    // Realiza una consulta para obtener todos los registros de tiempo relacionados con la actividad
    const registroTiempoRef = collection(db, 'registro_tiempo');
    const querySnapshot = await getDocs(registroTiempoRef);

    const registrosTiempo = [];

    for (const doc of querySnapshot.docs) {
      const data = doc.data();
      if (data.actividad.id === id_actividad) {
        // Filtra los campos que deseas y agrega el ID del documento
        const { nombre_actividad, duracion, fecha } = data;
        const costo_intervalo = typeof data.costo_intervalo === 'number' ? data.costo_intervalo.toFixed(2) : null; // Limitar a dos decimales
        const registroTiempoId = doc.id; // ID del documento
        registrosTiempo.push({ id_registro: registroTiempoId, nombre_actividad, duracion, fecha, costo_intervalo });
      }
    }

    console.log('Contenido de registrosTiempo:', registrosTiempo); // Agrega esta línea para imprimir en la consola
    res.status(200).json(registrosTiempo);
  } catch (error) {
    console.error('Error al obtener registros de tiempo:', error);
    res.status(500).json({ error: 'Ocurrió un error al obtener registros de tiempo' });
  }
});
//---------------------------------------------------------------------------------------

router.get('/actividades-por-usuario/:id_usuario', async (req, res) => {
  try {
    const { id_usuario } = req.params;

    // Obtén el precio del dólar en Bolívares (BS)
    const precioBCV = await obtenerPrecioBCV();

    const actividadesRef = collection(db, 'actividades');
    const actividadesQuerySnapshot = await getDocs(
      query(
        actividadesRef,
        where('usuario', '==', doc(db, 'usuarios', id_usuario))
      )
    );

    const actividadesUsuario = [];

    for (const doc of actividadesQuerySnapshot.docs) {
      const data = doc.data();
      const {
        nombre_actividad,
        completado,
        duracion_total,
        proyecto,
        tarifa,
        fecha_registro,
        hora_registro,
        total_tarifa,
      } = data;

      // Verifica si total_tarifa y costo_intervalo no son undefined antes de aplicar toFixed(2)
      const total_tarifaDosDecimales = typeof total_tarifa === 'number' ? total_tarifa.toFixed(2) : null;

      let nombre_proyecto = null;
      let categoria = null;
      let nombre_cliente = null;
      let total_tarifa_bs = null; // Agregamos el campo total_tarifa_bs
      if (proyecto) {
        const proyectoDocRef = proyecto;
        const proyectoDocSnapshot = await getDoc(proyectoDocRef);

        if (proyectoDocSnapshot.exists()) {
          nombre_proyecto = proyectoDocSnapshot.data().nombre_proyecto;
          categoria = proyectoDocSnapshot.data().categoria;

          const clienteRef = proyectoDocSnapshot.data().cliente;
          if (clienteRef) {
            const clienteDocSnapshot = await getDoc(clienteRef);
            if (clienteDocSnapshot.exists()) {
              nombre_cliente = clienteDocSnapshot.data().nombre_cliente;

            // Calcula total_tarifa_bs multiplicando total_tarifa por el precio del BCV
            total_tarifa_bs = total_tarifa * precioBCV;

            }
          }
        }
      }
      const total_tarifaDosDecimales_bs = typeof total_tarifa_bs === 'number' ? total_tarifa_bs.toFixed(2) : null;

      actividadesUsuario.push({
        nombre_actividad,
        completado,
        duracion_total,
        tarifa,
        fecha_registro,
        hora_registro,
        nombre_proyecto,
        categoria,
        total_tarifa: total_tarifaDosDecimales,
        nombre_cliente,
        total_tarifa_bs: total_tarifaDosDecimales_bs
      });
    }

    res.status(200).json({ actividadesUsuario });
  } catch (error) {
    console.error('Error al obtener actividades y registros de tiempo:', error);
    res.status(500).json({ error: 'Ocurrió un error al obtener actividades y registros de tiempo' });
  }
});
// Ruta para obtener todos los proyectos de un usuario
router.get('/proyectos-por-usuario/:id_usuario', async (req, res) => {
  try {
    const { id_usuario } = req.params; // Captura el id_usuario de la URL

    const proyectosRef = collection(db, 'proyectos');
    const proyectosQuerySnapshot = await getDocs(
      query(
        proyectosRef,
        where('usuario', '==', doc(db, 'usuarios', id_usuario))
      )
    );

    const proyectosUsuario = [];

    for (const doc of proyectosQuerySnapshot.docs) {
      const id_proyecto = doc.id;
      const data = doc.data();
      const { nombre_proyecto, categoria, descripcion, cliente } = data;

      let nombre_cliente = null;

      if (cliente) {
        const clienteDocRef = cliente;
        const clienteDocSnapshot = await getDoc(clienteDocRef);

        if (clienteDocSnapshot.exists()) {
          nombre_cliente = clienteDocSnapshot.data().nombre_cliente;
        }
      }

      proyectosUsuario.push({
        id_proyecto,
        nombre_proyecto,
        categoria,
        descripcion,
        nombre_cliente,
      });
    }

    res.status(200).json({
      proyectosUsuario,
    });
  } catch (error) {
    console.error('Error al obtener proyectos:', error);
    res.status(500).json({ error: 'Ocurrió un error al obtener proyectos' });
  }
});



// Ruta para obtener todos los clientes de un usuario
router.get('/clientes-por-usuario/:id_usuario', async (req, res) => {
  try {
    const { id_usuario } = req.params; // Captura el id_usuario de la URL

    // Realiza una consulta para obtener todos los clientes relacionados con el usuario
    const clientesRef = collection(db, 'clientes');
    const clientesQuerySnapshot = await getDocs(
      query(
        clientesRef,
        where('usuario', '==', doc(db, 'usuarios', id_usuario))
      )
    );

    const clientesUsuario = [];

    clientesQuerySnapshot.forEach(doc => {
      const id_cliente = doc.id;
      const data = doc.data();
      const { nombre_cliente } = data;

      clientesUsuario.push({
        id_cliente,
        nombre_cliente,
      });
    });

    res.status(200).json({
      clientesUsuario,
    });
  } catch (error) {
    console.error('Error al obtener clientes:', error);
    res.status(500).json({ error: 'Ocurrió un error al obtener clientes' });
  }
})


module.exports = router;

